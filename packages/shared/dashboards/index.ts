import { LogicNode } from "../checks";

export function getDefaultDateRange() {
  const endOfToday = new Date();
  endOfToday.setHours(23, 59, 59, 999);

  const oneWeekAgoDate = new Date(endOfToday);
  oneWeekAgoDate.setDate(oneWeekAgoDate.getDate() - 30);
  oneWeekAgoDate.setHours(0, 0, 0, 0);
  const defaultRange: [Date, Date] = [oneWeekAgoDate, endOfToday];
  return defaultRange;
}

type Aggregation = "sum" | "avg" | null | undefined;

// TODO: types
export const DEFAULT_CHARTS = {
  "models/top": {
    id: "models/top",
    name: "Top Models",
    description: "The top models in your project",
    type: "Top",
    dataKey: "models/top",
    aggregationMethod: null,
  },
  "templates/top": {
    id: "templates/top",
    name: "Top Templates",
    description: "The top templates in your project",
    type: "Top",
    dataKey: "templates/top",
    aggregationMethod: null,
  },
  "users/top": {
    id: "users/top",
    name: "Top Users",
    description: "The top users in your project",
    type: "Top",
    dataKey: "users/top",
    aggregationMethod: null,
  },
  tokens: {
    id: "tokens",
    name: "Tokens",
    description: "The number of tokens generated by your LLM calls",
    type: "Area",
    dataKey: "tokens",
    aggregationMethod: "sum",
  },
  costs: {
    id: "costs",
    name: "Costs",
    description: "The total cost generated by your LLM calls",
    type: "Area",
    dataKey: "costs",
    aggregationMethod: "sum",
  },
  errors: {
    id: "errors",
    name: "Errors Volume",
    description: "How many errors were captured in your app",
    type: "Area",
    dataKey: "errors",
    aggregationMethod: "sum",
    color: "red",
  },
  "users/new": {
    id: "users/new",
    name: "New Users",
    description: "The number of new tracked users for the selected period",
    type: "Area",
    dataKey: "users/new",
    aggregationMethod: "sum",
    color: "green",
  },
  "users/active": {
    id: "users/active",
    name: "Active Users",
    description: "The number of active users for the selected period",
    type: "Area",
    dataKey: "users/active",
    aggregationMethod: "sum",
    color: "yellow",
  },
  "run-types": {
    id: "run-types",
    name: "Runs Volume",
    description: "The total number of runs generated by your app",
    type: "Area",
    dataKey: "run-types",
    splitBy: "type",
    aggregationMethod: "sum",
  },
  latency: {
    id: "latency",
    name: "Avg. LLM Latency (s)",
    description: "The average duration of your LLM Calls",
    type: "Area",
    dataKey: "latency",
    color: "purple",
    aggregationMethod: "avg",
  },
  // "users/average-cost": {
  //   dataKey: "users/average-cost",
  //   props: ["cost"],
  //   title: "Avg. User Cost",
  //   description: "The average cost of each of your users",
  //   formatter: formatCost,
  // },
  // "top/languages": {
  //   chartType: "pie",
  //   dataKey: "top/languages",
  //   props: ["isoCode", "count"],
  //   title: "Languages",
  //   description: "Top languages for your runs",
  // },

  // "feedback-ratio": {
  //   dataKey: "feedback-ratio",
  //   props: ["ratio"],
  //   agg: "avg",
  //   title: "Thumbs Up/Down Ratio",
  //   description: "The ratio of thumbs up to thumbs down feedback",
  // },
};

export const chartProps = Object.keys(DEFAULT_CHARTS);

export type GranularityType = "hourly" | "daily" | "weekly" | "monthly";

export interface Chart {
  id: string;
  createdAt: string;
  updatedAt: string;
  projectId: string;
  dashboardId: string | null;
  name: string;
  description: string | null;
  type: string;
  dataKey: string;
  aggregationMethod: string | null;
  primaryDimension: string | null;
  secondaryDimension: string | null;
  isCustom: boolean;
  color: string | null;
}

export interface Dashboard {
  id: string;
  createdAt: string;
  updatedAt: string;
  ownerId: string;
  projectId: string;
  name: string;
  description: string | null;
  checks: any;
  startDate: string | null;
  endDate: string | null;
  granularity: GranularityType | null;
  isHome: boolean;
  charts: Chart[];
}
